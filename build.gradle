plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.3.20'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '5.0.0'
}

group = 'com.service.example'
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
  jcenter()
}

ext {
  kotlinVersion = '1.3.20'
  vertxVersion = '3.8.0'
  junitJupiterEngineVersion = '5.4.0'
}

application {
  mainClassName = 'io.vertx.core.Launcher'
}

def mainVerticleName = 'com.service.example.application.App'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

configurations {
  ktlint
}

dependencies {
  ktlint "com.pinterest:ktlint:0.34.2"
  implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"
  implementation "io.vertx:vertx-web-client:$vertxVersion"
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-service-proxy:$vertxVersion"
  implementation "io.vertx:vertx-mongo-client:$vertxVersion"
  implementation "io.vertx:vertx-config:$vertxVersion"
  implementation "io.vertx:vertx-config-vault:$vertxVersion"
  implementation "io.vertx:vertx-config-consul:$vertxVersion"
  implementation "org.slf4j:jcl-over-slf4j:1.7.20"
  implementation "ch.qos.logback:logback-classic:1.1.7"

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
}

compileKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

shadowJar {
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  main = "com.pinterest.ktlint.Main"
  classpath = configurations.ktlint
  args "src/**/*.kt" ,"--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  main = "com.pinterest.ktlint.Main"
  classpath = configurations.ktlint
  args "-F", "src/**/*.kt"
}
sourceSets {
  main {
    java {
      srcDirs += 'src/main/generated'
    }
  }
}
